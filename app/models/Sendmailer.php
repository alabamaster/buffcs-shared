<?php 
namespace app\models;

require_once 'app/lib/PHPMailer/Exception.php';
require_once 'app/lib/PHPMailer/PHPMailer.php';
require_once 'app/lib/PHPMailer/SMTP.php';
require_once 'app/models/Main.php';
require_once 'app/core/Model.php';

use PHPMailer\PHPMailer\PHPMailer;
use PHPMailer\PHPMailer\Exception;
use PHPMailer\PHPMailer\SMTP;

use app\core\Model;
use app\core\Config;
use app\lib\DB;
use PDO;
use app\models\Main;

class Sendmailer extends Model
{
	public $MAILER;
	public $MAIN_MODEL;

	public function __construct()
	{
		parent::__construct();

		$this->MAILER = new PHPMailer(true);
		$this->MAIN_MODEL = new Main;
	}

	public function supportMessage($post)
	{
		try {
			//Server settings
			$this->MAILER->CharSet = 'UTF-8';
			// $this->MAILER->SMTPDebug = SMTP::DEBUG_SERVER;                      // Enable verbose debug output
			$this->MAILER->isSMTP(); // Send using SMTP
			$this->MAILER->Host       = Config::get('SMTP')['host']; // Set the SMTP server to send through
			$this->MAILER->SMTPAuth   = true; // Enable SMTP authentication
			$this->MAILER->Username   = Config::get('SMTP')['username']; // SMTP username
			$this->MAILER->Password   = Config::get('SMTP')['password']; // SMTP password
			$this->MAILER->SMTPSecure = PHPMailer::ENCRYPTION_SMTPS; // Enable TLS encryption; `PHPMailer::ENCRYPTION_SMTPS` also accepted
			$this->MAILER->Port       = Config::get('SMTP')['port']; // TCP port to connect to

			//Recipients
			$this->MAILER->setFrom(Config::get('SMTP')['reply'], Config::get('NAME'));
			$this->MAILER->addAddress(Config::get('SMTP')['reply'], Config::get('NAME')); // Add a recipient
			$this->MAILER->addReplyTo($post['email'], 'Information');

			// Content
			$this->MAILER->isHTML(true); // Set email format to HTML
			$this->MAILER->Subject = Config::get('NAME') . ' ‚Äî Support message';
			$this->MAILER->Body    = htmlspecialchars($post['message']) . '<br>Social link: ' . htmlspecialchars($post['socialLink']);
			$this->MAILER->AltBody = '–û—Ç–∫—Ä–æ–π—Ç–µ –ø–∏—Å—å–º–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π HTML';

			$this->MAILER->send();
			// echo 'Message has been sent';
			// $_SESSION['support_messages'] = true;
			return true;
		} catch (Exception $e) {
			$this->error = "Message could not be sent. Mailer Error: {$this->MAILER->ErrorInfo}";
			// $this->error = $this->MAILER->ErrorInfo;
			return false;
		}
	}

	public function newPaySuccessMessage($pay_id)
	{
		$query = DB::run('SELECT * FROM `ez_buy_logs` WHERE `id` = ?', [ $pay_id ])->fetch(PDO::FETCH_ASSOC);

		try {
			if ( !$query ) {
				// $this->error = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–∏—Å—å–º–æ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!';
				throw new Exception("Error receiving information, the letter was not sent!\n");
				return false;
			}
		} catch (Exception $e) {
			echo 'Error: ' . $e->getMessage();
		}

		if ( $query['type'] == 'a' ) {
			$user_type = '–Ω–∏–∫ + –ø–∞—Ä–æ–ª—å';
			$user_name = htmlspecialchars($query['nickname']);
		} else {
			$user_type = 'SteamID + –ø–∞—Ä–æ–ª—å';
			$user_name = htmlspecialchars($query['steamid']);
		}

		$days = ($query['days'] == 0) ? $days = '–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ ( Õ°‚óâ Õú ñ Õ°‚óâ)' : $days = $query['days'] . ' –¥–Ω.';
		$vk = ($query['vk'] == null) ? $vk = '–Ω–µ—Ç' : '<a href="'.$query['vk'].'">'.htmlspecialchars($query['vk']).'</a>';

		$values = [
			'server' 	=> $this->MAIN_MODEL->getServerNameById($query['sid']),
			'user_type' => $user_type,
			'user_name' => $user_name,
			'password' 	=> htmlspecialchars($query['password']),
			'tariff' 	=> $this->MAIN_MODEL->getPrivilegeNameById($query['pid']),
			'days' 		=> $days,
			'vk' 		=> $vk,
			'email' 	=> $query['email'],
		];

		try {
			//Server settings
			$this->MAILER->CharSet = 'UTF-8';
			// $this->MAILER->SMTPDebug = SMTP::DEBUG_SERVER; // Enable verbose debug output
			$this->MAILER->isSMTP(); // Send using SMTP
			$this->MAILER->Host       = Config::get('SMTP')['host']; // Set the SMTP server to send through
			$this->MAILER->SMTPAuth   = true; // Enable SMTP authentication
			$this->MAILER->Username   = Config::get('SMTP')['username']; // SMTP username
			$this->MAILER->Password   = Config::get('SMTP')['password']; // SMTP password
			$this->MAILER->SMTPSecure = PHPMailer::ENCRYPTION_SMTPS; // Enable TLS encryption; `PHPMailer::ENCRYPTION_SMTPS` also accepted
			$this->MAILER->Port       = Config::get('SMTP')['port']; // TCP port to connect to

			//Recipients
			$this->MAILER->setFrom(Config::get('SMTP')['from'], Config::get('NAME'));
			$this->MAILER->addAddress($values['email'], Config::get('NAME')); // Add a recipient
			$this->MAILER->addReplyTo(Config::get('SMTP')['reply'], 'Information');

			// Content
			$this->MAILER->isHTML(true); // Set email format to HTML
			$this->MAILER->Subject = Config::get('NAME') . ' ‚Äî –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!';
			$this->MAILER->Body    = '
				<div style="font-size:15px;background-color:#fff;border:2px solid #c7c7c7;border-radius:2px;padding:20px;line-height: 1.5;font-weight: 400;">
					‚≠ê –í—ã –∫—É–ø–∏–ª–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: <b>'.$values['server'].'</b> üïπÔ∏è<br>
					üíÄ –¢–∏–ø —É—Å–ª—É–≥–∏: <b>'.$values['user_type'].'</b><br>
					üî™ –í–∞—à –Ω–∏–∫–Ω–µ–π–º: <b>'.$values['user_name'].'</b><br>
					üîë –í–∞—à –ø–∞—Ä–æ–ª—å: <b>'.$values['password'].'</b><br>
					üî• –ü—Ä–∏–≤–∏–ª–µ–≥–∏—è: <b>'.$values['tariff'].'</b><br>
					üìÖ –ö–æ–ª-–≤–æ –¥–Ω–µ–π: <b>'.$values['days'].'</b><br>
					- –°—Å—ã–ª–∫–∞ –Ω–∞ –í–ö: <b>'.$values['vk'].'</b>
					<hr>
					‚ù§Ô∏è –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! ( Õ°·µî Õú ñ Õ°·µî )
				</div>';
			$this->MAILER->AltBody = '–û—Ç–∫—Ä–æ–π—Ç–µ –ø–∏—Å—å–º–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π HTML';

			$this->MAILER->send();
			// echo "Message has been sent\n";
			return true;
		} catch (Exception $e) {
			echo "Message could not be sent. Mailer Error: {$this->MAILER->ErrorInfo}";
			return false;
		}
	}

	public function cronMessage()
	{
		$minus3days = $this->time - 86400 * 3; // 3days // –º–∏–Ω—É—Å 3 –¥–Ω—è –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
		$plus3days = $this->time + 86400 * 3; // 3days // –ø–ª—é—Å 3 –¥–Ω—è –∫ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–µ

		$sql = DB::run('SELECT `nickname`, `steamid`, `flags`, `created`, `expired`, `tarif_id`, `server_id`, `email` FROM `'.$this->DB['prefix'].'_amxadmins` `t1` JOIN `'.$this->DB['prefix'].'_admins_servers` `t2` WHERE (`expired` <= ? AND `expired` != 0 AND `expired` >= ?) AND `t1`.`id` = `t2`.`admin_id`', [ $plus3days, $this->time ])->fetchAll();

		if ( !empty($sql) ) 
		{
			$countMessages = 0;
			foreach ($sql as $row) 
			{
				if ( $row['flags'] == 'a' ) {
					$user_type = '–Ω–∏–∫';
					$user_name = htmlspecialchars($row['nickname']);
				} else {
					$user_type = 'SteamID';
					$user_name = htmlspecialchars($row['steamid']);
				}
				$values = [
					'user_name' => $user_name,
					'user_type' => $user_type,
					'created'	=> date('d.m.Y –≤ H:i', $row['created']),
					'expired'	=> date('d.m.Y –≤ H:i', $row['expired']),
					'privilege'	=> $this->MAIN_MODEL->getPrivilegeNameById($row['tarif_id']),
					'server'	=> $this->MAIN_MODEL->getServerNameById($row['server_id']),
				];
				try {
					//Server settings
					$this->MAILER->CharSet = 'UTF-8';
					// $this->MAILER->SMTPDebug = SMTP::DEBUG_SERVER;                      // Enable verbose debug output
					$this->MAILER->isSMTP(); // Send using SMTP
					$this->MAILER->Host       = Config::get('SMTP')['host']; // Set the SMTP server to send through
					$this->MAILER->SMTPAuth   = true; // Enable SMTP authentication
					$this->MAILER->Username   = Config::get('SMTP')['username']; // SMTP username
					$this->MAILER->Password   = Config::get('SMTP')['password']; // SMTP password
					$this->MAILER->SMTPSecure = PHPMailer::ENCRYPTION_SMTPS; // Enable TLS encryption; `PHPMailer::ENCRYPTION_SMTPS` also accepted
					$this->MAILER->Port       = Config::get('SMTP')['port']; // TCP port to connect to

					//Recipients
					$this->MAILER->setFrom(Config::get('SMTP')['from'], Config::get('NAME'));
					$this->MAILER->addAddress($row['email'], Config::get('NAME')); // Add a recipient
					$this->MAILER->addReplyTo(Config::get('SMTP')['reply'], 'Information');

					// Content
					$this->MAILER->isHTML(true); // Set email format to HTML
					$this->MAILER->Subject = Config::get('NAME') . ' ‚Äî ‚úâ –û–∫–æ–Ω—á–∞–Ω–∏–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ ‚õî';
					$this->MAILER->Body    = "
	<div style='font-size:15px;background-color:#fff;border:2px solid #c7c7c7;border-radius:2px;padding:20px;line-height: 1.5;font-weight: 400;'>
		<p style='margin:0;'>
			<b style='color:#e00000;'>–°—Ä–æ–∫ –≤–∞—à–∏—Ö –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –∫–æ–Ω—Ü—É!</b><hr>
			üë§ –í–∞—à {$values['user_type']}: <b>{$values['user_name']}</b><br>
			üìÖ –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: <b>{$values['created']}</b><br>
			üìÜ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: <b>{$values['expired']}</b><br>
			üïπÔ∏è –°–µ—Ä–≤–µ—Ä: <b>{$values['server']}</b><br>
			‚ö° –ü—Ä–∏–≤–∏–ª–µ–≥–∏—è: <b>{$values['privilege']}</b>
			<hr>
			‚ö† –ü—Ä–æ–¥–ª–∏—Ç—å –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é –∏–ª–∏ –∫—É–ø–∏—Ç—å –Ω–æ–≤—É—é, –í—ã –º–æ–∂–µ—Ç–µ –≤ <a href='".Config::get('SITEURL')."account/login'>–ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ</a>!
		</p>
	</div>";
					$this->MAILER->AltBody = '–û—Ç–∫—Ä–æ–π—Ç–µ –ø–∏—Å—å–º–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π HTML';

					$this->MAILER->send();
					// echo 'Message has been sent';
				} catch (Exception $e) {
					$this->error = "Message could not be sent. Mailer Error: {$this->MAILER->ErrorInfo}";
					// $this->error = $this->MAILER->ErrorInfo;
					return false;
				}
				$countMessages++;
			}
			echo 'Number of messages sent: ' . $countMessages . "\n";
			return true;
		} else {
			echo 'Cron result: 0';
		}
	}

	public function resetPasswordMessage($email, $newpass)
	{
		try {
			//Server settings
			$this->MAILER->CharSet = 'UTF-8';
			// $this->MAILER->SMTPDebug = SMTP::DEBUG_SERVER; // Enable verbose debug output
			$this->MAILER->isSMTP(); // Send using SMTP
			$this->MAILER->Host       = Config::get('SMTP')['host']; // Set the SMTP server to send through
			$this->MAILER->SMTPAuth   = true; // Enable SMTP authentication
			$this->MAILER->Username   = Config::get('SMTP')['username']; // SMTP username
			$this->MAILER->Password   = Config::get('SMTP')['password']; // SMTP password
			$this->MAILER->SMTPSecure = PHPMailer::ENCRYPTION_SMTPS; // Enable TLS encryption; `PHPMailer::ENCRYPTION_SMTPS` also accepted
			$this->MAILER->Port       = Config::get('SMTP')['port']; // TCP port to connect to

			//Recipients
			$this->MAILER->setFrom(Config::get('SMTP')['from'], Config::get('NAME'));
			$this->MAILER->addAddress($email, Config::get('NAME')); // Add a recipient
			$this->MAILER->addReplyTo(Config::get('SMTP')['reply'], 'Information');

			// Content
			$this->MAILER->isHTML(true); // Set email format to HTML
			$this->MAILER->Subject = Config::get('NAME') . ' ‚Äî –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è!';
			$this->MAILER->Body    = '
				<div style="font-size:15px;background-color:#fff;border:2px solid #c7c7c7;border-radius:2px;padding:20px;line-height: 1.5;font-weight: 400;">
					<b>–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è</b><hr>
					‚ö† –í–∞–º –ø—Ä–∏—à–ª–æ —ç—Ç–æ –ø–∏—Å—å–º–æ –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–∞ —Å–∞–π—Ç–µ <a href="'.Config::get('SITEURL').'">'.Config::get('SITEURL').'</a> –≤—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å —Ñ—É–Ω–∫—Ü–∏–µ–π —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è,<br> –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∏ –Ω–µ –≤—ã, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –≤ —Å–≤–æ–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ!<br>
					üîë –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞: <b>'.$newpass.'</b>
				</div>';
			$this->MAILER->AltBody = '–û—Ç–∫—Ä–æ–π—Ç–µ –ø–∏—Å—å–º–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π HTML';

			$this->MAILER->send();
			return true;
		} catch (Exception $e) {
			echo "Message could not be sent. Mailer Error: {$this->MAILER->ErrorInfo}";
			return false;
		}
	}
}